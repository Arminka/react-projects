{"ast":null,"code":"var _jsxFileName = \"/Users/agrigoryan/Documents/react-storybook-v6/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { greenBright } from 'colorette';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // Define the DOM tree as an object\n  const domTree = {\n    name: 'A',\n    children: [{\n      name: 'B',\n      children: [{\n        name: 'E',\n        children: []\n      }, {\n        name: 'F',\n        children: []\n      }]\n    }, {\n      name: 'C',\n      children: []\n    }, {\n      name: 'D',\n      children: [{\n        name: 'G',\n        children: []\n      }, {\n        name: 'H',\n        children: []\n      }]\n    }]\n  };\n\n  // Function to traverse the DOM tree and find children of a given node\n  function findChildren(nodeName, tree) {\n    // If the current node matches the target node, return its children\n    if (tree.name === nodeName) {\n      return tree.children.map(child => child.name);\n    }\n\n    // Recursively search for the target node in the children of the current node\n    for (const child of tree.children) {\n      const result = findChildren(nodeName, child);\n      if (result.length > 0) {\n        return result;\n      }\n    }\n\n    // If the target node is not found, return an empty array\n    return [];\n  }\n\n  // Example usage\n  const childrenOfB = findChildren('B', domTree);\n  console.log(childrenOfB); // Output: ['E', 'F']\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: \"Learn React\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","greenBright","jsxDEV","_jsxDEV","App","domTree","name","children","findChildren","nodeName","tree","map","child","result","length","childrenOfB","console","log","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/agrigoryan/Documents/react-storybook-v6/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { greenBright } from 'colorette';\n\nfunction App() {\n  // Define the DOM tree as an object\nconst domTree = {\n  name: 'A',\n  children: [\n    {\n      name: 'B',\n      children: [\n        { name: 'E', children: [] },\n        { name: 'F', children: [] }\n      ]\n    },\n    {\n      name: 'C',\n      children: []\n    },\n    {\n      name: 'D',\n      children: [\n        { name: 'G', children: [] },\n        { name: 'H', children: [] }\n      ]\n    }\n  ]\n};\n\n// Function to traverse the DOM tree and find children of a given node\nfunction findChildren(nodeName, tree) {\n  // If the current node matches the target node, return its children\n  if (tree.name === nodeName) {\n    return tree.children.map(child => child.name);\n  }\n\n  // Recursively search for the target node in the children of the current node\n  for (const child of tree.children) {\n    const result = findChildren(nodeName, child);\n    if (result.length > 0) {\n      return result;\n    }\n  }\n\n  // If the target node is not found, return an empty array\n  return [];\n}\n\n// Example usage\nconst childrenOfB = findChildren('B', domTree);\nconsole.log(childrenOfB); // Output: ['E', 'F']\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      \n          Learn React\n       \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,WAAW,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EACb;EACF,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,GAAG;IACTC,QAAQ,EAAE,CACR;MACED,IAAI,EAAE,GAAG;MACTC,QAAQ,EAAE,CACR;QAAED,IAAI,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAG,CAAC,EAC3B;QAAED,IAAI,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAG,CAAC;IAE/B,CAAC,EACD;MACED,IAAI,EAAE,GAAG;MACTC,QAAQ,EAAE;IACZ,CAAC,EACD;MACED,IAAI,EAAE,GAAG;MACTC,QAAQ,EAAE,CACR;QAAED,IAAI,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAG,CAAC,EAC3B;QAAED,IAAI,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAG,CAAC;IAE/B,CAAC;EAEL,CAAC;;EAED;EACA,SAASC,YAAYA,CAACC,QAAQ,EAAEC,IAAI,EAAE;IACpC;IACA,IAAIA,IAAI,CAACJ,IAAI,KAAKG,QAAQ,EAAE;MAC1B,OAAOC,IAAI,CAACH,QAAQ,CAACI,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACN,IAAI,CAAC;IAC/C;;IAEA;IACA,KAAK,MAAMM,KAAK,IAAIF,IAAI,CAACH,QAAQ,EAAE;MACjC,MAAMM,MAAM,GAAGL,YAAY,CAACC,QAAQ,EAAEG,KAAK,CAAC;MAC5C,IAAIC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAOD,MAAM;MACf;IACF;;IAEA;IACA,OAAO,EAAE;EACX;;EAEA;EACA,MAAME,WAAW,GAAGP,YAAY,CAAC,GAAG,EAAEH,OAAO,CAAC;EAC9CW,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC,CAAC,CAAC;;EAExB,oBACEZ,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAX,QAAA,eAClBJ,OAAA;MAAQe,SAAS,EAAC,YAAY;MAAAX,QAAA,EAAC;IAI/B;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACC,EAAA,GA1DQnB,GAAG;AA4DZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}